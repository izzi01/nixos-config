#!/usr/bin/env bash
# Unified apply script for Linux
# Auto-detects: Full NixOS vs Standalone Linux (Home Manager)

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Custom print function
_print() {
  echo -e "$1"
}

# Custom prompt function
_prompt() {
  local message="$1"
  local variable="$2"
  _print "$message"
  read -r $variable
}

# Detect if running on full NixOS or standalone Linux
IS_NIXOS=false
if [[ -f /etc/NIXOS ]] || [[ -f /run/current-system/sw/bin/nixos-rebuild ]]; then
  IS_NIXOS=true
  _print "${BLUE}=== Detected: Full NixOS Installation ===${NC}"
else
  _print "${BLUE}=== Detected: Standalone Linux (Home Manager) ===${NC}"
fi

# Detect architecture
export ARCH=$(uname -m)
if [[ "$ARCH" == "arm64" ]]; then
  ARCH="aarch64"
elif [[ "$ARCH" == "x86_64" ]]; then
  ARCH="x86_64"
fi
_print "${GREEN}Architecture: ${ARCH}-linux${NC}"
_print ""

# Fetch username from the system
export USERNAME=$(whoami)

# If the username is 'nixos' or 'root', ask the user for their username
if [[ "$USERNAME" == "nixos" ]] || [[ "$USERNAME" == "root" ]]; then
  _prompt "${YELLOW}You're running as $USERNAME. Please enter your desired username: ${NC}" USERNAME
fi

# Check if git is available
if command -v git >/dev/null 2>&1; then
  export GIT_EMAIL=$(git config --get user.email || echo "")
  export GIT_NAME=$(git config --get user.name || echo "")
else
  _print "${YELLOW}Git is not available. It will be installed via Nix.${NC}"
fi

# If git email is not found, ask the user
if [[ -z "$GIT_EMAIL" ]]; then
  _prompt "${YELLOW}Please enter your email: ${NC}" GIT_EMAIL
fi

# If git name is not found, ask the user
if [[ -z "$GIT_NAME" ]]; then
  _prompt "${YELLOW}Please enter your full name: ${NC}" GIT_NAME
fi

# NixOS-specific configuration
if [[ "$IS_NIXOS" == true ]]; then
  # Get primary network interface
  export PRIMARY_IFACE=$(ip -o -4 route show to default | awk '{print $5}')
  _print "${GREEN}Found primary network interface: $PRIMARY_IFACE${NC}"

  # Get hostname
  _prompt "${YELLOW}Please enter a hostname for the system: ${NC}" HOST_NAME
  export HOST_NAME

  # Select boot disk
  select_boot_disk() {
    local disks
    local _boot_disk

    _print "${YELLOW}Available disks:${NC}"
    disks=$(lsblk -nd --output NAME,SIZE | grep -v loop)
    echo "$disks"

    _print "${RED}WARNING: All data on the chosen disk will be erased during installation!${NC}"
    _prompt "${YELLOW}Enter the boot disk name (e.g., sda, nvme0n1). Do not include '/dev/': ${NC}" _boot_disk

    _print "${YELLOW}You selected $_boot_disk. This will DELETE EVERYTHING. Are you sure? (Y/N): ${NC}"
    read -r confirmation
    if [[ "$confirmation" =~ ^[Yy]$ ]]; then
      export BOOT_DISK=$_boot_disk
    else
      _print "${RED}Disk selection cancelled. Exiting.${NC}"
      exit 1
    fi
  }

  select_boot_disk
fi

# Confirmation step
confirm_details() {
  _print ""
  _print "${GREEN}Configuration Summary:${NC}"
  _print "${GREEN}  Username: $USERNAME${NC}"
  _print "${GREEN}  Email: $GIT_EMAIL${NC}"
  _print "${GREEN}  Name: $GIT_NAME${NC}"
  _print "${GREEN}  Architecture: ${ARCH}-linux${NC}"

  if [[ "$IS_NIXOS" == true ]]; then
    _print "${GREEN}  Primary interface: $PRIMARY_IFACE${NC}"
    _print "${GREEN}  Boot disk: $BOOT_DISK${NC}"
    _print "${GREEN}  Hostname: $HOST_NAME${NC}"
  fi

  _print ""
  _prompt "${YELLOW}Is this correct? (yes/no): ${NC}" choice

  case "$choice" in
    [Yy]* ) _print "${GREEN}Continuing...${NC}";;
    [Nn]* ) _print "${RED}Exiting script.${NC}" && exit 1;;
    * ) _print "${RED}Invalid option. Exiting script.${NC}" && exit 1;;
  esac
}

confirm_details

# Function to replace tokens in files
replace_tokens() {
  local file="$1"

  # Skip the apply script itself
  if [[ $(basename "$file") == "apply" ]]; then
    return
  fi

  # Only process text files
  if file "$file" 2>/dev/null | grep -q text; then
    sed -i -e "s/%USER%/$USERNAME/g" "$file" 2>/dev/null || true
    sed -i -e "s/%EMAIL%/$GIT_EMAIL/g" "$file" 2>/dev/null || true
    sed -i -e "s/%NAME%/$GIT_NAME/g" "$file" 2>/dev/null || true

    if [[ "$IS_NIXOS" == true ]]; then
      sed -i -e "s/%INTERFACE%/$PRIMARY_IFACE/g" "$file" 2>/dev/null || true
      sed -i -e "s/%DISK%/$BOOT_DISK/g" "$file" 2>/dev/null || true
      sed -i -e "s/%HOST%/$HOST_NAME/g" "$file" 2>/dev/null || true
    fi
  fi
}

_print ""
_print "${YELLOW}Replacing tokens in configuration files...${NC}"

# Traverse directories and replace tokens
export -f replace_tokens
export USERNAME GIT_EMAIL GIT_NAME
if [[ "$IS_NIXOS" == true ]]; then
  export PRIMARY_IFACE BOOT_DISK HOST_NAME
fi

find . -type f -exec bash -c 'replace_tokens "$0"' {} \; 2>/dev/null

# Update flake.nix with username
if [[ -f "flake.nix" ]]; then
  sed -i "s/user = \".*\";/user = \"$USERNAME\";/" flake.nix 2>/dev/null || true
fi

echo "$USERNAME" > /tmp/username.txt
_print "${GREEN}✓ Configuration files updated with user information.${NC}"

# Apply configuration based on system type
_print ""
if [[ "$IS_NIXOS" == true ]]; then
  # Full NixOS - use nixos-rebuild
  _print "${YELLOW}Applying NixOS configuration...${NC}"
  _print "${BLUE}Running: sudo nixos-rebuild switch --flake .#${ARCH}-linux${NC}"
  _print ""

  if sudo nixos-rebuild switch --flake ".#${ARCH}-linux"; then
    _print ""
    _print "${GREEN}╔═══════════════════════════════════════════╗${NC}"
    _print "${GREEN}║  ✓ NixOS configuration applied!          ║${NC}"
    _print "${GREEN}╚═══════════════════════════════════════════╝${NC}"
    _print ""
  else
    _print ""
    _print "${RED}╔═══════════════════════════════════════════╗${NC}"
    _print "${RED}║  ✗ NixOS configuration failed            ║${NC}"
    _print "${RED}╚═══════════════════════════════════════════╝${NC}"
    exit 1
  fi
else
  # Standalone Linux - use Home Manager
  _print "${YELLOW}Checking for Home Manager...${NC}"

  if ! command -v home-manager &> /dev/null; then
    _print "${YELLOW}Home Manager not found. Installing...${NC}"
    nix run home-manager/master -- init --switch
    _print "${GREEN}✓ Home Manager installed.${NC}"
  fi

  _print ""
  _print "${YELLOW}Applying Home Manager configuration...${NC}"
  _print "${BLUE}Running: home-manager switch --flake .#${USERNAME}@${ARCH}-linux${NC}"
  _print ""

  if home-manager switch --flake ".#${USERNAME}@${ARCH}-linux"; then
    _print ""
    _print "${GREEN}╔═══════════════════════════════════════════╗${NC}"
    _print "${GREEN}║  ✓ Home Manager configuration applied!   ║${NC}"
    _print "${GREEN}╚═══════════════════════════════════════════╝${NC}"
    _print ""
    _print "${GREEN}Next steps:${NC}"
    _print "  1. Restart your terminal: ${BLUE}exec \$SHELL${NC}"
    _print "  2. Your shell is now configured with all packages"
    _print "  3. To update: ${BLUE}home-manager switch --flake .#${USERNAME}@${ARCH}-linux${NC}"
    _print "     or use alias: ${BLUE}nix-apply${NC}"
    _print ""
  else
    _print ""
    _print "${RED}╔═══════════════════════════════════════════╗${NC}"
    _print "${RED}║  ✗ Home Manager configuration failed     ║${NC}"
    _print "${RED}╚═══════════════════════════════════════════╝${NC}"
    exit 1
  fi
fi
